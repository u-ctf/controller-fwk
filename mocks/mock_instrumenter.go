// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/u-ctf/controller-fwk/instrument (interfaces: Instrumenter)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_instrumenter.go -package mocks github.com/u-ctf/controller-fwk/instrument Instrumenter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sentry "github.com/getsentry/sentry-go"
	gomock "go.uber.org/mock/gomock"
	workqueue "k8s.io/client-go/util/workqueue"
	controllerruntime "sigs.k8s.io/controller-runtime"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	handler "sigs.k8s.io/controller-runtime/pkg/handler"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockInstrumenter is a mock of Instrumenter interface.
type MockInstrumenter struct {
	ctrl     *gomock.Controller
	recorder *MockInstrumenterMockRecorder
	isgomock struct{}
}

// MockInstrumenterMockRecorder is the mock recorder for MockInstrumenter.
type MockInstrumenterMockRecorder struct {
	mock *MockInstrumenter
}

// NewMockInstrumenter creates a new mock instance.
func NewMockInstrumenter(ctrl *gomock.Controller) *MockInstrumenter {
	mock := &MockInstrumenter{ctrl: ctrl}
	mock.recorder = &MockInstrumenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstrumenter) EXPECT() *MockInstrumenterMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockInstrumenter) Cleanup(req reconcile.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup", req)
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockInstrumenterMockRecorder) Cleanup(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockInstrumenter)(nil).Cleanup), req)
}

// GetOrCreateSentryHubForEvent mocks base method.
func (m *MockInstrumenter) GetOrCreateSentryHubForEvent(event any) *sentry.Hub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateSentryHubForEvent", event)
	ret0, _ := ret[0].(*sentry.Hub)
	return ret0
}

// GetOrCreateSentryHubForEvent indicates an expected call of GetOrCreateSentryHubForEvent.
func (mr *MockInstrumenterMockRecorder) GetOrCreateSentryHubForEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateSentryHubForEvent", reflect.TypeOf((*MockInstrumenter)(nil).GetOrCreateSentryHubForEvent), event)
}

// GetSentryHubForRequest mocks base method.
func (m *MockInstrumenter) GetSentryHubForRequest(req reconcile.Request) (*sentry.Hub, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentryHubForRequest", req)
	ret0, _ := ret[0].(*sentry.Hub)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSentryHubForRequest indicates an expected call of GetSentryHubForRequest.
func (mr *MockInstrumenterMockRecorder) GetSentryHubForRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentryHubForRequest", reflect.TypeOf((*MockInstrumenter)(nil).GetSentryHubForRequest), req)
}

// InstrumentPredicate mocks base method.
func (m *MockInstrumenter) InstrumentPredicate(arg0 predicate.Predicate) predicate.Predicate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstrumentPredicate", arg0)
	ret0, _ := ret[0].(predicate.Predicate)
	return ret0
}

// InstrumentPredicate indicates an expected call of InstrumentPredicate.
func (mr *MockInstrumenterMockRecorder) InstrumentPredicate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstrumentPredicate", reflect.TypeOf((*MockInstrumenter)(nil).InstrumentPredicate), arg0)
}

// InstrumentRequestHandler mocks base method.
func (m *MockInstrumenter) InstrumentRequestHandler(arg0 handler.TypedEventHandler[client.Object, reconcile.Request]) handler.TypedEventHandler[client.Object, reconcile.Request] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstrumentRequestHandler", arg0)
	ret0, _ := ret[0].(handler.TypedEventHandler[client.Object, reconcile.Request])
	return ret0
}

// InstrumentRequestHandler indicates an expected call of InstrumentRequestHandler.
func (mr *MockInstrumenterMockRecorder) InstrumentRequestHandler(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstrumentRequestHandler", reflect.TypeOf((*MockInstrumenter)(nil).InstrumentRequestHandler), arg0)
}

// NewQueue mocks base method.
func (m *MockInstrumenter) NewQueue(mgr controllerruntime.Manager) func(string, workqueue.TypedRateLimiter[reconcile.Request]) workqueue.TypedRateLimitingInterface[reconcile.Request] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQueue", mgr)
	ret0, _ := ret[0].(func(string, workqueue.TypedRateLimiter[reconcile.Request]) workqueue.TypedRateLimitingInterface[reconcile.Request])
	return ret0
}

// NewQueue indicates an expected call of NewQueue.
func (mr *MockInstrumenterMockRecorder) NewQueue(mgr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQueue", reflect.TypeOf((*MockInstrumenter)(nil).NewQueue), mgr)
}
