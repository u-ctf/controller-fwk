// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/controller-runtime/pkg/reconcile (interfaces: TypedReconciler)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_typedreconciler.go -package mocks sigs.k8s.io/controller-runtime/pkg/reconcile TypedReconciler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockTypedReconciler is a mock of TypedReconciler interface.
type MockTypedReconciler[request comparable] struct {
	ctrl     *gomock.Controller
	recorder *MockTypedReconcilerMockRecorder[request]
	isgomock struct{}
}

// MockTypedReconcilerMockRecorder is the mock recorder for MockTypedReconciler.
type MockTypedReconcilerMockRecorder[request comparable] struct {
	mock *MockTypedReconciler[request]
}

// NewMockTypedReconciler creates a new mock instance.
func NewMockTypedReconciler[request comparable](ctrl *gomock.Controller) *MockTypedReconciler[request] {
	mock := &MockTypedReconciler[request]{ctrl: ctrl}
	mock.recorder = &MockTypedReconcilerMockRecorder[request]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypedReconciler[request]) EXPECT() *MockTypedReconcilerMockRecorder[request] {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockTypedReconciler[request]) Reconcile(arg0 context.Context, arg1 request) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0, arg1)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockTypedReconcilerMockRecorder[request]) Reconcile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockTypedReconciler[request])(nil).Reconcile), arg0, arg1)
}
